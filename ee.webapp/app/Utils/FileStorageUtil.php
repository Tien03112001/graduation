<?php
/**
 * Created by PhpStorm.
 * User: BaoHoang
 * Date: 7/14/2022
 * Time: 16:41
 */

namespace App\Utils;


use App\Common\SingletonPattern;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Str;

class FileStorageUtil extends SingletonPattern
{
    protected $id;
    protected $url;
    protected $uploadUrl;
    protected $infoUrl;
    protected $deleteUrl;
    protected $token;

    /**
     * FileStorageUtil constructor.
     */
    public function __construct()
    {
        $this->id = config('cdn.id');
        $this->url = config('cdn.url');
        $this->uploadUrl = $this->url . '/upload';
        $this->infoUrl = $this->url . '/info';
        $this->deleteUrl = $this->url . '/delete';
        $this->token = config('cdn.token');
    }

    /**
     * @return FileStorageUtil
     */
    public static function getInstance()
    {
        return parent::getInstance(); // TODO: Change the autogenerated stub
    }


    /**
     * @param string $path
     * @param UploadedFile $file
     * @param int $maxQuality
     * @param int $minQuality
     * @return bool|string
     */
    public function putFile(string $path, UploadedFile $file, int $maxQuality = 100, int $minQuality = 10)
    {
        $filename = $file->getClientOriginalName() . '.' . $file->getClientOriginalExtension();
        $response = Http::attach('file', file_get_contents($file), $filename)
            ->withHeaders([
                'Authorization' => 'Bearer ' . $this->token
            ])
            ->post($this->uploadUrl, [
                'id' => $this->id,
                'path' => $path,
                'max_quality' => $maxQuality,
                'min_quality' => $minQuality
            ]);
        if ($response->status() == 200) {
            $data = $response->json();
            return $data["data"]["url"] ?? false;
        }
        return false;
    }


    public function deleteFile($url)
    {
        if (Str::startsWith($url, $this->url)) {
            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->token
            ])->post($this->deleteUrl, [
                'id' => $this->id,
                'url' => $url,
            ]);
            if ($response->status() == 200) {
                return true;
            }
        }
        return false;
    }

    /**
     * @param array|string|null $urls
     * @return bool
     */
    public function deleteFiles($urls): bool
    {
        foreach ($urls as $url) {
            if (!$this->deleteFile($url)) {
                return false;
            }
        }
        return true;
    }

    public function getInfo($url)
    {
        if (Str::startsWith($url, $this->url)) {
            $response = Http::withHeaders([
                'Authorization' => 'Bearer ' . $this->token
            ])->get($this->infoUrl, [
                'id' => $this->id,
                'url' => $url,
            ]);
            if ($response->status() == 200) {
                $data = $response->json();
                return $data["data"] ?? false;
            }
        }
        return false;
    }

}
