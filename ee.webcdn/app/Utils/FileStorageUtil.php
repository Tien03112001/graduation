<?php
/**
 * Created by PhpStorm.
 * User: BaoHoang
 * Date: 7/14/2022
 * Time: 16:41
 */

namespace App\Utils;


use App\Common\SingletonPattern;
use Carbon\Carbon;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class FileStorageUtil extends SingletonPattern
{
    /* @var $disk Storage */
    protected $disk;

    protected $diskName;

    protected $rootDir;

    /**
     * FileStorageUtil constructor.
     */
    public function __construct()
    {
        $this->diskName = 'public';
        $this->disk = Storage::disk($this->diskName);

        $this->rootDir = $this->disk->path('');
    }

    /**
     * @return FileStorageUtil
     */
    public static function getInstance()
    {
        return parent::getInstance(); // TODO: Change the autogenerated stub
    }


    /**
     * @param string $path
     * @param UploadedFile $file
     * @return bool|string
     */
    public function putFile($path, UploadedFile $file)
    {
        $savedPath = $file->store($path, ['disk' => $this->diskName]);
        if (!$savedPath) {
            return false;
        }
        return $this->disk->url($this->getRealPath($savedPath));
    }

    /**
     * @param string $path
     * @param string $filename
     * @param UploadedFile $file
     * @return bool|string
     */
    public function putFileAs($path, $filename, UploadedFile $file)
    {
        $savedPath = $file->storeAs($path, $filename, ['disk' => $this->diskName]);
        if (!$savedPath) {
            return false;
        }
        return $this->disk->url($this->getRealPath($savedPath));
    }


    /**
     * @param array|string|null $urls
     * @return bool
     */
    public function deleteFiles($urls)
    {
        if (is_array($urls)) {
            foreach ($urls as $url) {
                if (!FileStorageUtil::getInstance()->deleteFiles($url)) {
                    return false;
                }
            }
            return true;
        } elseif (is_string($urls)) {
            $root = $this->disk->url('');
            if (Str::startsWith($urls, $root)) {
                $path = Str::replaceFirst($root, '', $urls);
                return $this->disk->delete($path);
            }
        }
        return false;
    }

    public function getRealPath($savedPath)
    {
        return Str::replaceFirst($this->rootDir, '', $savedPath);
    }


    public function getRootUrl()
    {
        return $this->disk->url('');
    }

    public function getPath(string $url)
    {
        return Str::replaceFirst($this->getRootUrl(), '', $url);
    }

    public function getInfoAttributes($path)
    {
        return [
            'size' => sprintf('%.2fkb', $this->disk->size($path) / 1024),
            'lastModified' => Carbon::parse($this->disk->lastModified($path))->toDateTimeString(),
        ];
    }

    /**
     * @return string
     */
    public static function joinPaths()
    {
        $args = func_get_args();
        $paths = array();
        foreach ($args as $arg) {
            $paths = array_merge($paths, (array)$arg);
        }

        $paths = array_map(function ($p) {
            return trim($p, "/");
        }, $paths);
        $paths = array_filter($paths);
        return join('/', $paths);
    }

}
