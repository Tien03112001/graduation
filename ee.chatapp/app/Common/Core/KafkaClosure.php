<?php
/**
 * Created by PhpStorm.
 * User: BaoHoang
 * Date: 11/6/2022
 * Time: 19:52
 */

namespace App\Common\Core;


use App\Common\SingletonPattern;
use Illuminate\Support\Facades\Log;
use RdKafka\Message;

class KafkaClosure extends SingletonPattern
{
    protected $success;
    protected $partitionOffError;
    protected $timeOutError;
    protected $exception;

    public static function getInstance()
    {
        return new KafkaClosure(); // TODO: Change the autogenerated stub
    }

    /**
     * KafkaClosure constructor.
     */
    public function __construct()
    {
        $this->success = $this->defaultClosure();
        $this->partitionOffError = $this->defaultClosure();
        $this->timeOutError = $this->defaultClosure();
        $this->exception = $this->defaultClosure();
    }

    public function defaultClosure()
    {
        return function (Message $message) {
            Log::error(print_r((array)$message, true));
        };
    }

    /**
     * @return \Closure
     */
    public function getSuccess(): \Closure
    {
        return $this->success;
    }

    /**
     * @param \Closure $success
     * @return KafkaClosure
     */
    public function setSuccess(\Closure $success): KafkaClosure
    {
        $this->success = $success;
        return $this;
    }

    /**
     * @return \Closure|null
     */
    public function getPartitionOffError(): ?\Closure
    {
        return $this->partitionOffError;
    }

    /**
     * @param \Closure|null $partitionOffError
     * @return KafkaClosure
     */
    public function setPartitionOffError(?\Closure $partitionOffError): KafkaClosure
    {
        $this->partitionOffError = $partitionOffError;
        return $this;
    }

    /**
     * @return \Closure|null
     */
    public function getTimeOutError(): ?\Closure
    {
        return $this->timeOutError;
    }

    /**
     * @param \Closure|null $timeOutError
     * @return KafkaClosure
     */
    public function setTimeOutError(?\Closure $timeOutError): KafkaClosure
    {
        $this->timeOutError = $timeOutError;
        return $this;
    }

    /**
     * @return \Closure|null
     */
    public function getException(): ?\Closure
    {
        return $this->exception;
    }

    /**
     * @param \Closure|null $exception
     * @return KafkaClosure
     */
    public function setException(?\Closure $exception): KafkaClosure
    {
        $this->exception = $exception;
        return $this;
    }

}